type FontStyle = 'normal' | 'italic' | 'oblique';
type FontWeight = number | 'thin' | 'ultralight' | 'light' | 'normal' | 'medium' | 'semibold' | 'bold' | 'ultrabold' | 'heavy';
type FontDescriptor = {
    fontFamily: string;
    fontStyle?: FontStyle;
    fontWeight?: FontWeight;
};
type FontSourceOptions = {
    postscriptName?: string;
    method?: 'GET' | 'HEAD' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';
    headers?: Record<string, string>;
    body?: any;
};
type FontSource = {
    src: string;
    fontStyle?: FontStyle;
    fontWeight?: FontWeight;
} & FontSourceOptions;
type SingleLoad = {
    family: string;
} & FontSource;
type BulkLoad = {
    family: string;
    fonts: FontSource[];
};
interface EmojiSourceUrl {
    url: string;
    format?: string;
    withVariationSelectors?: boolean;
}
interface EmojiSourceBuilder {
    builder: (code: string) => string;
    withVariationSelectors?: boolean;
}
type EmojiSource = EmojiSourceUrl | EmojiSourceBuilder;
type HyphenationCallback = (word: string) => string[];

declare class FontStore {
    fonts: {};
    emojiSource: EmojiSource | null;
    hyphenationCallback: HyphenationCallback | null;
    register: (data: SingleLoad | BulkLoad) => void;
    registerEmojiSource: (emojiSource: EmojiSource) => void;
    registerHyphenationCallback: (callback: HyphenationCallback) => void;
    getFont: (descriptor: FontDescriptor) => any;
    load: (descriptor: FontDescriptor) => Promise<void>;
    reset: () => void;
    clear: () => void;
    getRegisteredFonts: () => {};
    getEmojiSource: () => EmojiSource | null;
    getHyphenationCallback: () => HyphenationCallback | null;
    getRegisteredFontFamilies: () => string[];
}

export { type EmojiSource, type FontDescriptor, type FontStyle, type FontWeight, type HyphenationCallback, FontStore as default };
